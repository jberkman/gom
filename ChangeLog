2008-03-10  jacob berkman  <jacob@ilovegom.org>

	* examples/console.gom: display errors from the eval() call if
	they occur as they are much better than what gets printed to
	stderr
	
	* src/libgom/gomvalue.c (gom_jsval): handle NULL GObjects
	
	* src/libgom/gomjselement.c: 
	* src/libgom/gomjsnode.c: 
	* src/libgom/gomjsdocument.c: use new NOT_IMPLEMENTED macro

	* src/libgom/gomjsnavigator.c (gom_js_navigator_construct): 
	* src/libgom/gomjsobject.c (gom_js_object_construct): no need to
	complain here, really

	* include/gommacros.h (GOM_JS_NOT_IMPLEMENTED): throw an exception
	if we hit an un-implemented function

2008-03-09  jacob berkman  <jacob@ilovegom.org>

	* configure.ac: bump to 0.1

	* src/libgom/gomobject.c (camel_uncase): turn some_thing_like_this
	to someThingLikeThis
	(gom_object_resolve): try to look up the attribute with camel
	casing if it could not be found

	* src/libgom/gomjselement.c (gom_js_element_set_attribute): 
	* src/libgom/gomdoc.c (gom_dom_parser_start_element): refactor to
	use new signal id and

	* src/libgom/gomjsobject.c (gom_js_object_connect): take a signal
	id instead of a signal name

	* examples/console.gom: start using some jQuery syntax, for fun

	* src/gom/gom.c (main): use gom_widget_init_log_func() while running
	gom_widget_init()

	* src/libgom/gomwidget.c (gom_widget_init_log_func): GObject
	complains about some stuff we do in gom_widget_init(), so add a
	log handler that doesn't print those messages

	* src/libgom/gomdominterfaces.c: add stubs for GomNamedNodeMap

	* src/libgom/gomdom.c: include header for GOM_DEFINE_QUARK

	* src/libgom/gomjsnode.c (gom_js_node_props): 
	* src/libgom/gomjsdocument.c (document_props): remove props as
	they are all handled automatically now

	* src/libgom/gomjselement.c (gom_js_element_props): 
	* src/libgom/gomdominterfaces.c: 
	* src/libgom/gomwidget.c (gom_widget_get_property)
	(gom_widget_set_property, gom_widget_init_once): 
	* src/libgom/gomglist.c (gom_g_list_get_property):
	(gom_g_list_class_init):
	* src/libgom/gomdoc.c (gom_doc_get_property)
	(gom_doc_set_property, gom_doc_class_init): convert dom attributes
	to GObject properties

	* src/libgom/gomobject.c (gom_js_object_[gs]et_prop): use the
	spec's name, as it has the proper casing

	* include/gommacros.h (GOM_DEFINE_INTERFACE_WITH_CODE)
	(GOM_DEFINE_INTERFACE_WITH_PREREQUISITE, GOM_DEFINE_INTERFACE):
	add an argument for the body of a base_init function
	(GOM_DEFINE_INTERFACE): make all interfaces GObjects

	* include/gom/dom/gomnode.h (_GomNodeInterface): 
	* include/gom/dom/gomnodelist.h (_GomNodeListInterface): 
	* include/gom/dom/gomdocumenttype.h (_GomDocumentTypeInterface): 
	* include/gom/dom/gomprocessinginstruction.h (_GomProcessingInstructionInterface): 
	* include/gom/dom/gomdocument.h (_GomDocumentInterface): 
	* include/gom/dom/gomattr.h (_GomAttrInterface): 
	* include/gom/dom/gomnotation.h (_GomNotationInterface):
	* include/gom/dom/gomelement.h (_GomElementInterface): 
	* include/gom/dom/gomnamednodemap.h: (_GomNamedNodeMapInterface):
	* include/gom/dom/gomcharacterdata.h (_GomCharacterDataInterface):
	remove attribute methods

	* examples/console.gom: include jquery for fun and profit, and use
	the width-request and height-request properties instead of
	default-width and default-height, as those don't work with gom
	right now

	* src/libgom/gomjsnode.c (gom_js_node_get_node_name): implement
	(gom_js_node_get_node_type): implement
	(gom_js_node_get_parent_node): implement
	(gom_js_node_get_last_child): implement
	(gom_js_node_get_previous_sibling): implement
	(gom_js_node_get_next_sibling): implement
	(gom_js_node_append_child): implement
	(gom_js_node_has_child_nodes): implement

	* src/libgom/gomjscontext.c
	(gom_js_context_init_standard_classes): init the navigator class
	(gom_js_context_init): create a navigator object

	* src/libgom/gomjsdocument.c (gom_js_document_create_element):
	implement

	* src/libgom/gomdoc.c (gom_doc_error_quark): fix c/p error
	(gom_doc_append_child): return new_child per spec
	(gom_doc_get_element_by_id): loop through all children
	(gom_dom_parser_start_script): support src attribute of script tag
	(only local files so far)
	(gom_dom_parser_start_element): split script tag to above
	(gom_dom_parser_end_element): script tags with src attributes will
	not have their contents parsed

	* src/libgom/gomjsexception.[ch]: actually commit these files this
	time

	* src/libgom/gomjsnavigator.[ch]: add a window.navigator
	implementation

2008-03-07  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsexception.c (gom_js_exception_get_error)
	(gom_js_exception_set_error): convert between GError and js
	exceptions

	* src/libgom/gomjselement.c: throw exceptions on error

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): throw
	exceptions for errors
	(gom_dom_parser_end_element): throw an exception if <script>
	evaluation fails

	* src/libgom/gomjscontext.c (gom_js_context_init_private): throw
	an exception if the context already has private data

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	throw exceptions when we return failure

	* src/libgom/gomdoc.c: add an error quark for document parsing
	errors

2008-03-06  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjswindow.c (gom_js_window_set_interval): implement
	(the variant with a string as the first method seems to be broken,
	though)
	(gom_js_window_clear_interval): implement
	(gom_js_window_set_timeout, gom_js_window_clear_timeout): implement

	* src/gom/gom.c (main): that... wasn't quite the right way to free
	our context private data

2008-03-05  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjselement.c (gom_js_element_init_class): register
	as a handler for GtkWidgets

	* src/libgom/gomjswindow.c (gom_js_window_init_object): initialize
	a global Window object

	* src/libgom/gomdoc.c: 
	* src/libgom/gomwidget.c (gom_widget_init_once): remove
	GomJSObject implementation

	* src/libgom/gomjsobject.c (gom_js_object_register_js_class):
	instead of being an interface that objects support, JSClasses
	should register their GType in their init function
	(gom_js_object_get_js_class): look up an object's JSClass; if none
	are found in its parents or interfaces, just return a GomJSObject
	(gom_js_object_resolve): fully remove bogus GomJSObject check
	(gom_js_object_init_class): store GObject <-> JSObject hashes
	per-context rather than globally; also, create a GType -> JSClass
	table
	(gom_js_object_get_or_create_js_object): use new class lookup
	method

	* src/libgom/gominterfaces.c: remove GomJSObject definition

	* src/libgom/gomdom.c (gom_dom_exception_error_quark): use quark
	macro

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	remove check for GOM_IS_JS_OBJECT()
	(gom_js_document_init_class): register as a class for GomDocument

	* src/gom/gom.c (main): use new gom_js_context_* funcs

	* src/libgom/gomjscontext.c (gom_js_context_init): merge
	gom.c:main() and gomjswindow.c:gom_js_window_new_global(), and
	initialize a private GObject as the JSContext's private data

2008-03-04  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsobject.c (gom_js_object_to_string): print the
	gtype for gom objects in toString

	* src/libgom/gomjselement.c (gom_js_element_get_prop): return if
	there was no attribute
	(gom_js_element_resolve): if the prototype object has a property
	already, don't create one here

	* src/libgom/gomdoc.c (element_get_element_by_id): poor but
	functional implementation
	(gom_doc_get_element_by_id): call above method

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): don't set the
	return value if it's G_TYPE_INVALID (not sure if this is right
	yet...)
	(gom_js_object_resolve): remove warning if the object is not a
	GomJSObject
	(gom_js_object_get_or_create_js_object): if the object doesn't
	support GomJSObject, just create a js GomJSObject for it anyway

	* src/libgom/gominterfaces.c: add get_element_by_id stub

	* src/libgom/gomvalue.c (gom_jsval): allow GObjects now that
	_get_or_create_js_object() handles non-GomJSObjects; also set the
	return jsval to the object and return success on success

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	use new DOM Level 2 Core method

2008-03-03  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomdom.c (gom_dom_exception_error_quark): use a GOnce
	here

	* src/libgom/gomdoc.c (gom_doc_create_element): if the object
	could not be instantiated, set an error (fixes a secondary cause
	of the crash in issue #1)

	* include/gom/dom/gomdomexception.h: add an exception for unknown
	tags

	* src/libgom/gomwidget.c (gom_widget_init_once): return our fake
	type variable so that it all doesn't get optimized out (fixes
	issue #1)

	* src/libgom/gomjselement.c (element_get_prop, element_set_prop):
	use gom_object_[gs]et_attribute() for non-GObject properties
	(element_resolve): define non-GObject properties

	* src/libgom/gomwidget.c (append_child_attrs_foreach): helper for
	setting child attributes/properties
	(widget_append_child): use helper now that we don't have direct
	access to attributes
	(widget_get_attribute, widget_set_attribute): use
	gom_object_[gs]et_attribute()

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): convert
	arguments using gom_jsval(), try to return something if
	appropriate (untested)
	(gom_js_object_resolve): move reusable bits to
	gom_object_resolve()
	(gom_js_object_init_once, gom_js_object_init_class): init
	hashtables once

	* include/gom/gomvalue.[ch] (gom_jsval): declare the src GValue as
	const

	* include/gom/gomobject.[ch]: add some object utility functions
	shared by some js classes

2008-02-25  jacob berkman  <jacob@ilovegom.org>

	* tests/checkgomvalue.c: add checks for gom_jsval()

	* src/libgom/gomvalue.c (gom_jsval): make G_TYPE_CHAR and
	G_TYPE_UCHAR set strings

2008-02-24  jacob berkman  <jacob@ilovegom.org>

	* tests/checkgomvalue.[ch]: test gomvalue.h functions (so far only
	some of gom_g_value() is covered, but it has turned up some bugs;
	more expected in gom_jsval())

	* tests/checkgom.[ch]: beginnings of a test suite

	* src/libgom/gomvalue.c (gom_g_value): unit test bug fix #1: since
	JSVAL_INTs are 31 bits, their lsb (the tag mask) can have multiple
	values, since only the most lsb signifies JSVAL_INT

	* autogen.sh: remove dependency on gnome-common; just use
	autoreconf -im

	* include/gom/dom/Makefile.inc: 
	* include/gom/Makefile.inc: 
	* src/libgom/Makefile.inc: 
	* src/gom/Makefile.inc: 
	* Makefile.am:
	* Makefile.inc: split Makefile.inc into its component pieces

	* configure.ac: look for check

	* examples/console.gom: use some of the new stuff below

	* src/libgom/gomjsobject.c (object_get_closure_prop)
	(object_set_closure_prop): add a lookup for closures stored as
	properties named onsignal
	(gom_js_object_resolve): look up the GParamSpec or signal id on an
	object for a named property
	(object_get_prop): if the property is a gobject property, return
	its value.  if it's a signal, look up the func associated with its
	closure, if it exists
	(object_set_prop): setter as above
	(object_resolve): if the property exists, add it as a property to
	this object
	(gom_js_object_construct, gom_js_object_init_class): as below

	* src/libgom/gomjselement.c (element_construct)
	(gom_js_element_init_class): as below

	* src/libgom/gomjsnode.c (node_construct, gom_js_node_init_class):
	same as below

	* src/libgom/gomjsdocument.c (document_construct): add dummy
	constructor
	(gom_js_document_init_class): the proto should be constructed,
	pass our constructor to JS_InitClass

	* src/gom/gom.c (parse_idle): run in window's context, not jsdoc's

	* src/libgom/gomvalue.[ch] (gom_jsval): convert a GValue to a
	jsval
	(gom_g_value): convert a jsval to a GValue

2008-02-22  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjselement.c (element_get_attribute): use
	JS_ConvertArguments() as below
	(element_set_attribute): finish a correct implementation for
	setting event handlers via setAttribute(); this will probably be
	removed soon

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): refactor to
	reduce indenting levels

	* src/libgom/gomjswindow.c (window_alert): use
	JS_ConvertArguments() instead of manually marshaling the js
	arguments

2008-02-21  jacob berkman  <jacob@ilovegom.org>

	* examples/console.gom: quit when the window is closed

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): better
	handling for callbacks that return void

	* examples/console.gom: beginnings of a gui js console app

	* src/libgom/gomjselement.c (element_set_attribute): handle jsvals
	that aren't strings properly

	* src/libgom/gomdoc.c (gom_dom_parser_text): remove some debugging
	output
	(gom_dom_parser_error): remove, this was not useful
	
	* src/libgom/gomjswindow.c (window_alert): implement window.alert()

	* src/libgom/gomwidget.c (PRIV, free_priv, init_priv): add a
	private struct to store attrs instead of using _set_data/_get_data
	as we have no idea what the types of those data are
	(widget_append_child): use new priv struct to look for container
	child properties of the widget being added
	(widget_find_property): remove.  g_object_class_find_property()
	can do this all on its own
	(widget_get_attribute): initial implementation; use priv table if
	available
	(widget_set_attribute): store property in priv table if there
	isn't a property on the object
	(init_once_cb, gom_widget_init): switch to GOnce/g_once() as below

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): use
	G_VALUE_TYPE_NAME() instead of g_type_name(G_VALUE_TYPE())

	* src/libgom/*.c: add GOM_NOT_IMPLEMENTED macros where appropriate

	* include/gommacros.h (GOM_NOT_IMPLEMENTED): macro to print a
	warning on functions that are not yet implemented
	(_GOM_DEFINE_INTERFACE_BEGIN, _GOM_DEFINE_INTERFACE_END): use
	GOnce/g_once() instead of g_once_init_enter(), as the latter has
	different signatures on my mac and linux machines

2008-02-17  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): compile the
	function here before trying to connect the signal
	(gom_doc_parse_file): take a filename instead of a string

	* src/libgom/gomjsobject.c (gom_js_object_finalize): use
	gom_js_object_get_g_object() to get the GObject for this JSObject
	(gom_js_closure_new, gom_js_object_connect): take a JSFunction
	instead of a script

	* src/gom/gom.c (parse_idle): move doc parsing here so scripts can
	quit(), and let gom_doc_parse_file() load the file
	(main): shutdown javascript runtime to catch refcount bugs

2008-02-17  jacob berkman  <jacob@ilovegom.org>

	* Gom 0.0 released
