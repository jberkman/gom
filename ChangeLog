2008-04-06  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomwidget.c (gom_widget_event): skip the initial
	signal for windows with a focus widget, so that the event starts
	from that widget

2008-04-05  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomobject.c (gom_object_resolve): don't bother doing
	a non-camel uncased pass

	* src/libgom/gomjswindow.c (gom_js_window_parser_start_element):
	put the non-signal cases together

	* src/libgom/gomjselement.c (gom_js_element_get_attribute):
	resolve attribute names on this object, in case we are trying to
	resolve a property
	(gom_js_element_set_attribute): roll the non-signal cases together

	* include/gom/gomcamel.h: 
	* src/libgom/gomcamel.c: slightly better - if not more complicated
	- versions of the camel case functions

	* src/libgom/gomjsnode.c (gom_js_node_init_class): register
	ourselves so that non-elements at least get a Node object

	* src/libgom/gomjselement.c (gom_js_element_init_class): register
	ourselves as handling the GomElement interface, so that GomElems
	work, too

	* src/libgom/gomjseventtarget.c (gom_js_event_target_init_class):
	register ourselves for GomEventTarget

	* src/libgom/gomjsobject.c (GT2JSC): this is now a GSList ** and
	not a hashtable
	(gom_js_object_register_js_class): prepend a ClassMap to the list
	of registered classes
	(gom_js_object_get_js_class): search the list from most recently
	added for a type which this object isa
	(gom_js_object_init_class): initialize the g2jsc data as a GSList **

	* src/libgom/gomdominterfaces.c: node-name, node-type -> read
	only; tag-name -> writable

	* src/libgom/gomwidget.c (widget_append_child): silently discard
	Text nodes
	(widget_append_child): ref our child, as gtk_container_add()
	doesn't, but this api implies that it does
	(widget_get_attribute_ns): handle get_attribute returning NULL
	(update_tag_name): update tagName based on our prefix
	(gom_widget_set_property): remove nodeName and localName
	(widget_size_allocate): emit resize event
	(widget_scroll): emit scroll events
	(gom_widget_constructed): connect to resize and scroll events
	(gom_widget_init_once): adjust param specs as above

	* src/libgom/gomdoc.c (gom_doc_get_property)
	(gom_doc_set_property): handle nodeName and nodeType properties
	(gom_doc_create_element_ns): better support for namespaces
	(gom_doc_create_element): don't just call create_element_ns(), as
	they are a little different
	(gom_doc_create_text_node): implement
	(gom_doc_constructor): don't set nodeName and nodeType here
	(gom_doc_class_init): override node-name and node-type

	* src/libgom/gomjswindow.c (push_scope): keep track of the default
	namespaces, as well as named namespaces, and the current Element
	(pop_scope): free a scope
	(lookup_namespace_prefix): look up a namespace in a given scope by
	prefix
	(lookup_namespace_qualified): lookup a namespace in the toplevel
	scop by qualified name
	(gom_js_window_parser_start_element): handle namespaces on tags
	and attributes using scopes; create Elements for scripts
	(gom_js_window_parser_end_element): evaluate a script based on its
	src attribute, or its Text children
	(gom_js_window_parser_text): create a Text node for text

2008-04-04  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomelem.c (gom_elem_get_property)
	(gom_elem_set_property, gom_elem_finalize, gom_elem_class_init):
	handle the properties mentioned below

	* src/libgom/gomnoodle.c (gom_noodle_get_property)
	(gom_noodle_set_property, gom_noodle_finalize)
	(gom_noodle_constructed): don't hndle namespaceURI, prefix,
	localName, nodeValue, nodeName, or nodeType in this object;
	subclasses should do that

	* include/gommacros.h (GOM_NOT_IMPLEMENTED_ERROR): set error for
	non-implemented functions
	(GOM_JS_NOT_IMPLEMENTED): use the above macro to make a
	DOMException object

	* src/libgom/gomtxt.c: 
	* include/gom/gomtxt.h: implementaton of Text

	* src/libgom/gomchardata.c: 
	* include/gom/gomchardata.h: implementation of CharacterData

	* include/gom/gomjsexception.h: 

	* include/gom/dom/gomdomexception.h: add an error for
	unimplemented functions

2008-04-03  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomwidget.c (gom_widget_get_property): add
	Element.tagName
	(gom_widget_event): this is now a signal handler, so don't try to
	chain up to the default class closure
	(gom_widget_event_after): copy too much code from above to handle
	focus in/out events
	(gom_widget_constructed): gtk_widget_add_events() takes event
	MASKs
	(gom_widget_constructed): connect to event and event-after signals
	(gom_widget_init_once): don't override GtkWidgetClass's event
	closure, as it's unreliable.  use signals instead.

	* src/libgom/gomdom.c (gom_dom_has_feature): disable some features
	we don't currently support

	* src/libgom/gomelem.c (gom_elem_get_attribute_ns)
	(gom_elem_set_attribute_ns): implement

2008-04-02  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsnode.c (gom_js_node_init_class): add node type
	enums to our ctor

	* src/libgom/gomjsexception.c (gom_js_exception_get_error): get an
	error for GomJSGErrorExceptions
	(gom_js_exception_set_error): create a GomJSGErrorException for
	all errors

	* src/libgom/gomjseventexception.c
	(gom_js_event_exception_init_class): use new api below

	* src/libgom/gomjsdomexception.c
	(gom_js_dom_exception_init_class): use new api below

	* include/gom/gomjsobject.h: 
	* src/libgom/gomjsobject.c (gom_js_object_define_static_enums):
	add static properties to a prototype's constructor for a given
	EnumClass

	* examples/console.gom: use bind("DOMActivate") rather than
	.onactivate

	* src/libgom/gomjscontext.c
	(gom_js_context_init_standard_classes): init the new exception
	classes

	* src/libgom/gomjsexception.c (gom_js_exception_get_error): if
	this is a known exception class, pull out its GError and use that
	directly, if it's there
	(gom_js_exception_set_error): create an object rather than a
	string for the exception for DOMExceptions and EventExceptions

	* include/gom/gomjsgerrorexception.h: 
	* src/libgom/gomjsgerrorexception.c: a base class for the
	exceptions below based on a GError

	* include/gom/gomjseventexception.h: 
	* src/libgom/gomjseventexception.c: a javascript class for
	EventExceptions

	* include/gom/gomjsdomexception.h: 
	* src/libgom/gomjsdomexception.c: a javascript class for
	DOMExceptions

	* src/libgom/gomwidget.c (INIT_MOUSE_EVENT, INIT_KEY_EVENT): use
	the standard DOM interfaces for creating events
	(widget_activate): dispatch the DOMActivate for button clicks and
	entry activations
	(gom_widget_constructed): connect to clicked and activate signals

	* src/libgom/gomdoc.c (gom_doc_create_event)
	(gom_doc_can_dispatch): implement DocumentEvent

	* include/gom/dom/gomevent.h: 
	* include/gom/dom/gomuievent.h: 
	* include/gom/dom/gommutationevent.h: 
	* include/gom/dom/gommouseevent.h: 
	* include/gom/dom/gomtextevent.h: 
	* include/gom/dom/gommutationnameevent.h: 
	* include/gom/dom/gomkeyboardevent.h: add macros for the events we
	support

2008-04-01  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsnavigator.c: 
	* src/libgom/gomjselement.c: 
	* src/libgom/gomjseventlistener.c: 
	* src/libgom/gomwidget.c:
	* src/libgom/gomnoodle.c: 
	* src/libgom/gomobject.c: 
	* src/libgom/gomjswindow.c: 
	* src/libgom/gomjsobject.c: tone down debugging output until we
	get a better logging situation in place

2008-03-31  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomwidget.c (widget_append_child): make the errors
	correspond with the failed tests
	(gom_widget_get_property): inline/refactor a few properties
	(widget_set_parent, widget_set_next_sibling)
	(widget_set_prev_sibling): print the same debugging spew as our
	Noodle complement
	(widget_sibling_requested): if our child list is dirty, update our
	children's siblings
	(widget_dirty_children): dirty our child list
	(gom_widget_constructed): if we are a container, dirty our child
	list when it changes
	(gom_widget_init_once): implement Parent

	* src/libgom/gomnoodle.c (gom_noodle_get_property): tickle our
	parent when we are asked for a sibling
	(find_node): find one of our child nodes
	(gom_noodle_insert_before): implement
	(gom_noodle_replace_child): ditto
	(gom_noodle_remove_child): refactor
	(gom_noodle_append_child): ditto
	(gom_noodle_set_parent): NULL our siblings, and handle a NULL
	parent
	(gom_noodle_set_prev_sibling): handle a NULL sibling
	(gom_noodle_set_next_sibling): handle a NULL sibling
	(gom_noodle_sibling_requested): if our children have changed since
	the last time a sibling was requested, update our children's
	siblings (implements Parent)

	* include/gom/gomparent.h: interface for parent nodes to implement

	* src/gom/gom.c (parse_idle): report any pending exceptions

	* src/libgom/gomwidget.c (gom_widget_get_property)
	(gom_widget_set_property): handle level 2 properties better
	(widget_set_parent, widget_set_next_sibling)
	(widget_set_prev_sibling): implement GomChild
	(gom_widget_constructed): basicall gom_noodle_constructed, and set
	the event mask on the events we're interested in
	(gom_widget_init_once): adjust properties as mentioned below

	* src/libgom/gomdominterfaces.c: specify some properties as
	construct-only writable, and specify enum properties correctly

	* src/libgom/gomdom.c (gom_dom_has_feature): implement to the best
	of my knowledge
	(gom_dom_create_document): implement
	(gom_dom_constructor): turn this into a singleton object

	* src/libgom/gomobject.c (gom_object_resolve): fix a subtle
	use-after-free

	* include/gom/gomdoc.h: 
	* src/libgom/gomdoc.c: inherit from GomNoodle; remove this
	object's implementaton of GomNode

	* src/libgom/gomjswindow.c (gom_js_window_parse_file): move
	parsing here, as this is a JS object anyway, and will define
	document on itself properly
	(gom_js_window_parser_start_element): create a document when
	appropriate, and add the new node to the parent here instead of at
	end_element, otherwise things don't work properly (like
	getElementById in a script at this level)

	* src/gom/gom.c (parse_idle): use new parse api

	* include/gom/gomtarget.h: 
	* src/libgom/gomtarget.c: implementation of EventTarget that can
	also be used as a proxy

	* include/gom/gomchild.h: helper interface for nodes to implement

	* include/gom/gomelem.h: 
	* src/libgom/gomelem.c: generic implementation of GomElement

	* include/gom/gomnoodle.h: 
	* src/libgom/gomnoodle.c: generic implementation of GomNode

2008-03-29  jacob berkman  <jacob@ilovegom.org>

	* examples/jquery-1.2.3.js: fix for http://dev.jquery.com/ticket/2620

	* examples/hello.gom: give the GtkWindow an id

	* examples/console.gom: add labels for the current x/y mouse
	coords, and an event handler to display them on mousemove

	* src/libgom/gomjselement.c (gom_js_element_resolve): set *objp to
	NULL when we aren't actually defining the property

	* src/libgom/gomeventtargetdelegate.c (find_entry): find a handler
	by namespace, type, use_capture, and optional listener
	(gom_event_target_delegate_add_event_listener_ns)
	(gom_event_target_delegate_remove_event_listener_ns)
	(gom_event_target_delegate_has_event_listener_ns)
	(gom_event_target_delegate_will_trigger_ns)
	(gom_event_target_delegate_dispatch_event): implment level 3 event
	target
	(dispatch_events): call handlers for a target and phase

	* src/libgom/gomwidget.c (widget_is_supported)
	(widget_has_attributes, widget_set_attribute_ns)
	(widget_remove_attribute_ns, widget_get_attribute_node_ns)
	(widget_set_attribute_node_ns)
	(widget_get_elements_by_tag_name_ns, widget_has_attribute_ns)
	(widget_has_attribute): add level 2 method stubs
	(widget_add_event_listener_ns, widget_remove_event_listener_ns)
	(widget_will_trigger_ns, widget_has_event_listener_ns): add level
	3 method stubs

	* src/libgom/gomdominterfaces.c: use -u-r-i for uris to camel
	correctly

	* src/libgom/gomjsnode.c: remove EventTarget stubs, and just set
	our proto to be an EventTarget instead

	* src/libgom/gomjscontext.c
	(gom_js_context_init_standard_classes): initialize event classes

	* src/libgom/gomkeyboardevt.c (gom_keyboard_evt_get_property):
	location is an enum
	(gom_keyboard_evt_get_modifier_state): add level 3 method

	* src/libgom/gomvalue.c (gom_jsval): handle enums correctly

	* src/libgom/gomjsdocument.c: enumerate with gom_js_object_enumerate

	* src/libgom/gomdom.c (gom_dom_create_document_type)
	(gom_dom_create_document): add stubs for level 2 methods

	* src/libgom/gomdoc.c (gom_doc_normalize, gom_doc_is_supported)
	(gom_doc_has_attributes, gom_doc_create_element_ns)
	(gom_doc_create_attribute_ns)
	(gom_doc_get_elements_by_tag_name_ns, gom_doc_import_node): add
	stubs for level 2 methods

	* src/libgom/gomjsobject.c (camel_case): move this from
	gomobject.c and uncomment
	(gom_js_object_enumerate): enumerate over GObject properties

	* src/libgom/gomevt.c (gom_evt_finalize, gom_evt_class_init): add
	a finalize method

	* src/gom/gom.c (gom_error_reporter): print errors as warnings

	* src/libgom/gomjseventlistener.c: 
	* include/gom/gomjseventlistener.h: a GObject wrapper for a JS
	event listener (either a Function or an object with a handleEvent
	method)

	* src/libgom/gomjseventtarget.c: 
	* include/gom/gomjseventtarget.h: 
	* src/libgom/gomjsuievent.c: 
	* include/gom/gomjsuievent.h: 
	* src/libgom/gomjskeyboardevent.c: 
	* include/gom/gomjskeyboardevent.h: 
	* src/libgom/gomjsmouseevent.c: 
	* include/gom/gomjsmouseevent.h: 
	* src/libgom/gomjsevent.c: 
	* include/gom/gomjsevent.h: add JS wrappers for event interfaces

	* src/libgom/gomglist.c: 
	* src/libgom/gommouseevt.c:
	* src/libgom/gomevt.c: 
	* src/libgom/gomuievt.c: use new macros below

	* include/gommacros.h (GOM_IMPLEMENT, GOM_IMPLEMENT_INTERFACE):
	helper macros for using the helper macros below

	* include/gom/gomeventtargetdelegate.h (GOM_IMPLEMENT_EVENT_TARGET_HELPER): 
	* include/gom/dom/gomtext.h (GOM_IMPLEMENT_TEXT): 
	* include/gom/dom/gomnodelist.h (GOM_IMPLEMENT_NODE_LIST): 
	* include/gom/dom/gomevent.h (GOM_IMPLEMENT_EVENT): 
	* include/gom/dom/gomdocumentevent.h (GOM_IMPLEMENT_DOCUMENT_EVENT): 
	* include/gom/dom/gomuievent.h (GOM_IMPLEMENT_UI_EVENT): 
	* include/gom/dom/gomdocumentview.h (GOM_IMPLEMENT_DOCUMENT_VIEW): 
	* include/gom/dom/gommutationnameevent.h (GOM_IMPLEMENT_MUTATION_NAME_EVENT): 
	* include/gom/dom/gomdocumentfragment.h (GOM_IMPLEMENT_DOCUMENT_FRAGMENT): 
	* include/gom/dom/gomentityreference.h (GOM_IMPLEMENT_ENTITY_REFERENCE): 
	* include/gom/dom/gommouseevent.h (GOM_IMPLEMENT_MOUSE_EVENT): 
	* include/gom/dom/gomelement.h (GOM_IMPLEMENT_ELEMENT): 
	* include/gom/dom/gomeventtarget.h (GOM_IMPLEMENT_EVENT_TARGET): 
	* include/gom/dom/gomnamednodemap.h (GOM_IMPLEMENT_NAMED_NODE_MAP): 
	* include/gom/dom/gomtextevent.h (GOM_IMPLEMENT_TEXT_EVENT): 
	* include/gom/dom/gomcharacterdata.h (GOM_IMPLEMENT_CHARACTER_DATA): 
	* include/gom/dom/gomdomimplementation.h (GOM_IMPLEMENT_DOM_IMPLEMENTATION): 
	* include/gom/dom/gomnode.h (GOM_IMPLEMENT_NODE): 
	* include/gom/dom/gomdocumenttype.h (GOM_IMPLEMENT_DOCUMENT_TYPE): 
	* include/gom/dom/gomdocument.h (GOM_IMPLEMENT_DOCUMENT): 
	* include/gom/dom/gomprocessinginstruction.h (GOM_IMPLEMENT_PROCESSING_INSTRUCTION): 
	* include/gom/dom/gomcustomevent.h (GOM_IMPLEMENT_CUSTOM_EVENT): 
	* include/gom/dom/gomattr.h (GOM_IMPLEMENT_ATTR): 
	* include/gom/dom/gommutationevent.h (GOM_IMPLEMENT_MUTATION_EVENT): 
	* include/gom/dom/gomcomment.h (GOM_IMPLEMENT_COMMENT): 
	* include/gom/dom/gomkeyboardevent.h (GOM_IMPLEMENT_KEYBOARD_EVENT): 
	* include/gom/dom/gomcdatasection.h (GOM_IMPLEMENT_CDATA_SECTION): 
	* include/gom/dom/gomabstractview.h (GOM_IMPLEMENT_ABSTRACT_VIEW): 
	* include/gom/dom/gomnotation.h (GOM_IMPLEMENT_NOTATION): 
	* include/gom/dom/gomeventlistener.h
	(GOM_IMPLEMENT_EVENT_LISTENER): add helper macros for implementing
	interfaces

2008-03-27  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomwidget.c (get_priv): create a delegate
	(free_priv): release the delegate
	(widget_add_event_listener, widget_remove_event_listener)
	(widget_dispatch_event): delegate
	(widget_get_event_target_delegate, widget_impl_helper)
	(gom_widget_init_once): implement GomEventTargetHelper

	* include/gom/gomeventtargetdelegate.h: 
	* src/libgom/gomeventtargetdelegate.c: an actual implementation of
	EventTarget for all things which implement it to use, and an
	interface to get at this object from the real EventTargets

	* src/libgom/gomdominterfaces.c: UIEvent properties are read-only

	* src/libgom/gomwidget.c (gom_widget_event): remember the last
	event/event type we handled, to work around gtk's built-in event
	bubbling

2008-03-26  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomkeyboardevt.c
	(gom_keyboard_evt_state_from_string): if we added a mask, no need
	to go through the rest of the items

	* src/libgom/gomwidget.c (widget_append_child,
	widget_set_attribute): update for shorter macros
	(gom_widget_get_property, gom_widget_set_property)
	(gom_widget_init_once): add level 2 Node properties
	(gom_widget_init_once): just manually install the properties on
	this class before adding the interfaces; this gets rid of the
	stupid GObject warnings
	(gom_widget_event): use new Level 3 api, handle keyboard events

	* src/libgom/gomdoc.c (gom_doc_get_property, gom_doc_class_init):
	add Core level 2 properties for Node

	* src/gom/gom.c (main): 
	* include/gom/gomwidget.h: remove gom_widget_init_log_func()

	* include/gom/gomkeyboardevt.h: implementation of KeyboardEvent

	* include/gom/gomevt.h: remove api already covered by CustomEvent

	* src/libgom/gommouseevt.c: 
	* src/libgom/gomdominterfaces.c: 
	* src/libgom/gomkeyboardevt.c: 
	* src/libgom/gomuievt.c:
	* include/gom/dom/gomevent.h: 
	* include/gom/dom/gomdocumentevent.h: 
	* include/gom/dom/gomuievent.h: 
	* include/gom/dom/gommutationnameevent.h: 
	* include/gom/dom/gommouseevent.h: 
	* include/gom/dom/gomeventtarget.h: 
	* include/gom/dom/gomtextevent.h: 
	* include/gom/dom/gomcustomevent.h: 
	* include/gom/dom/gommutationevent.h: 
	* include/gom/dom/gomkeyboardevent.h: update events to level 3

	* include/gom/gomkeyidentifiers.h: macros for key identifiers

	* include/gom/dom/gomeventexception.h: 
	* include/gom/dom/gomdomexception.h: rename some types and macros
	to be a little easier on the fingers and eyes

2008-03-25  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomwidget.c (get_priv): add a private structure which
	is used to track button events for clicks
	(widget_impl_node, widget_impl_element, widget_impl_target):
	rename
	(gom_widget_event): beginings of reporting Gdk events as DOM
	events.
	(widget_dispatch_event): just print the event we are dispatching
	(gom_widget_init_once): override the event function of
	GtkWidgetClass

	* src/libgom/gomdominterfaces.c: use the G_PARAM_STATIC_STRINGS
	macro

	* src/libgom/gomevt.c:
	* include/gom/gomevt.h: implement GomEvent

	* src/libgom/gomuievt.c:
	* include/gom/gomuievt.h: implement GomUIEvent

	* src/libgom/gommouseevt.c:
	* include/gom/gommouseevt.h: implement GomMouseEvent

2008-03-21  jacob berkman  <jacob@ilovegom.org>

	* include/gom/dom/gomdocument.h: 
	* include/gom/dom/gomdomexception.h: 
	* include/gom/dom/gomdomimplementation.h: 
	* include/gom/dom/gomelement.h: 
	* include/gom/dom/gomnamednodemap.h: 
	* include/gom/dom/gomnode.h: 
	* src/libgom/gomjsdocument.c: 
	* src/libgom/gomjselement.c: 
	* src/libgom/gomjsnode.c: 
	* src/libgom/gomwidget.c: add DOM Level 2 (Core) interfaces and
	attributes

	* include/gom/dom/gomabstractview.h: 
	* include/gom/dom/gomdocumentevent.h: 
	* include/gom/dom/gomdocumentview.h: 
	* include/gom/dom/gomevent.h: 
	* include/gom/dom/gomeventexception.h: 
	* include/gom/dom/gomeventlistener.h: 
	* include/gom/dom/gomeventtarget.h: 
	* include/gom/dom/gommouseevent.h: 
	* include/gom/dom/gommutationevent.h: 
	* include/gom/dom/gomuievent.h: add DOM Level 2 (Events)
	interfaces

	* src/libgom/gomdominterfaces.c: add DOM Level 2 (Core & Events)
	interfaces and attributes

2008-03-12  jacob berkman  <jacob@ilovegom.org>

	* examples/console.gom: 
	* examples/hello.gom: 
	* examples/jquery.gom: update for new schema

	* src/libgom/gomwidget.c (append_child_attrs_foreach):
	gtk_builder_value_from_string() can take a NULL builder as long as
	the spec does not have a GObject value type, which we probably
	couldn't do anyway
	(widget_get_attribute): a little refactoring
	(widget_set_attribute): same as above for the NULL builder; set an
	error in this case

	* src/libgom/gomdoc.c (gom_dom_parser_start_element)
	(gom_dom_parser_end_element): just ignore <gom>, <config>,
	<module>, and <app> for now

	* src/schema/gtkschema.c (process_attribute): convert back to a
	switch statement; only UNICHAR needs to be checked individually;
	add good support for enums. less-so for flags
	(process_child_properties): add listing of child properties; i
	don't know how to set acceptable attributes based on the parent
	element, so just set these as valid for all widgets
	(process_widget): add each class to the list of acceptable widgets
	(main): print out the list of child widgets

	* src/schema/gom.rnc: rename modules -> config, application ->
	app, add a misc category

	* include/gom/dom/gomdomexception.h
	(GOM_DOM_EXCEPTION_INVALID_ATTRIBUTE_TYPE): add an exception type
	for GObject properties

	* src/schema/gtkschema.c: generate the full gtk schema via
	introspection

	* src/schema/gom.rnc: move schema here

	* Makefile.am (gomwidgets.c): make gomwidgets.c here

	* gomwidgets.in: undefine the types we aren't going to use

	* src/libgom/gomwidget.c (gom_widget_init_once): use the more
	reusable widget list

2008-03-11  jacob berkman  <jacob@ilovegom.org>

	* data/gom.rnc: 
	* data/gom-gtk.rnc: first stab at relax-ng compact schema for
	validation of gom files.  the format has changed a bit, but the
	parser has not been updated, so the new .gom files are not being
	checked in at this time.  gom-gtk.rnc is intended to be generated
	from GObject introspection eventually

2008-03-10  jacob berkman  <jacob@ilovegom.org>

	* 0.1 release

	* examples/console.gom: display errors from the eval() call if
	they occur as they are much better than what gets printed to
	stderr
	
	* src/libgom/gomvalue.c (gom_jsval): handle NULL GObjects
	
	* src/libgom/gomjselement.c: 
	* src/libgom/gomjsnode.c: 
	* src/libgom/gomjsdocument.c: use new NOT_IMPLEMENTED macro

	* src/libgom/gomjsnavigator.c (gom_js_navigator_construct): 
	* src/libgom/gomjsobject.c (gom_js_object_construct): no need to
	complain here, really

	* include/gommacros.h (GOM_JS_NOT_IMPLEMENTED): throw an exception
	if we hit an un-implemented function

2008-03-09  jacob berkman  <jacob@ilovegom.org>

	* configure.ac: bump to 0.1

	* src/libgom/gomobject.c (camel_uncase): turn some_thing_like_this
	to someThingLikeThis
	(gom_object_resolve): try to look up the attribute with camel
	casing if it could not be found

	* src/libgom/gomjselement.c (gom_js_element_set_attribute): 
	* src/libgom/gomdoc.c (gom_dom_parser_start_element): refactor to
	use new signal id and

	* src/libgom/gomjsobject.c (gom_js_object_connect): take a signal
	id instead of a signal name

	* examples/console.gom: start using some jQuery syntax, for fun

	* src/gom/gom.c (main): use gom_widget_init_log_func() while running
	gom_widget_init()

	* src/libgom/gomwidget.c (gom_widget_init_log_func): GObject
	complains about some stuff we do in gom_widget_init(), so add a
	log handler that doesn't print those messages

	* src/libgom/gomdominterfaces.c: add stubs for GomNamedNodeMap

	* src/libgom/gomdom.c: include header for GOM_DEFINE_QUARK

	* src/libgom/gomjsnode.c (gom_js_node_props): 
	* src/libgom/gomjsdocument.c (document_props): remove props as
	they are all handled automatically now

	* src/libgom/gomjselement.c (gom_js_element_props): 
	* src/libgom/gomdominterfaces.c: 
	* src/libgom/gomwidget.c (gom_widget_get_property)
	(gom_widget_set_property, gom_widget_init_once): 
	* src/libgom/gomglist.c (gom_g_list_get_property):
	(gom_g_list_class_init):
	* src/libgom/gomdoc.c (gom_doc_get_property)
	(gom_doc_set_property, gom_doc_class_init): convert dom attributes
	to GObject properties

	* src/libgom/gomobject.c (gom_js_object_[gs]et_prop): use the
	spec's name, as it has the proper casing

	* include/gommacros.h (GOM_DEFINE_INTERFACE_WITH_CODE)
	(GOM_DEFINE_INTERFACE_WITH_PREREQUISITE, GOM_DEFINE_INTERFACE):
	add an argument for the body of a base_init function
	(GOM_DEFINE_INTERFACE): make all interfaces GObjects

	* include/gom/dom/gomnode.h (_GomNodeInterface): 
	* include/gom/dom/gomnodelist.h (_GomNodeListInterface): 
	* include/gom/dom/gomdocumenttype.h (_GomDocumentTypeInterface): 
	* include/gom/dom/gomprocessinginstruction.h (_GomProcessingInstructionInterface): 
	* include/gom/dom/gomdocument.h (_GomDocumentInterface): 
	* include/gom/dom/gomattr.h (_GomAttrInterface): 
	* include/gom/dom/gomnotation.h (_GomNotationInterface):
	* include/gom/dom/gomelement.h (_GomElementInterface): 
	* include/gom/dom/gomnamednodemap.h: (_GomNamedNodeMapInterface):
	* include/gom/dom/gomcharacterdata.h (_GomCharacterDataInterface):
	remove attribute methods

	* examples/console.gom: include jquery for fun and profit, and use
	the width-request and height-request properties instead of
	default-width and default-height, as those don't work with gom
	right now

	* src/libgom/gomjsnode.c (gom_js_node_get_node_name): implement
	(gom_js_node_get_node_type): implement
	(gom_js_node_get_parent_node): implement
	(gom_js_node_get_last_child): implement
	(gom_js_node_get_previous_sibling): implement
	(gom_js_node_get_next_sibling): implement
	(gom_js_node_append_child): implement
	(gom_js_node_has_child_nodes): implement

	* src/libgom/gomjscontext.c
	(gom_js_context_init_standard_classes): init the navigator class
	(gom_js_context_init): create a navigator object

	* src/libgom/gomjsdocument.c (gom_js_document_create_element):
	implement

	* src/libgom/gomdoc.c (gom_doc_error_quark): fix c/p error
	(gom_doc_append_child): return new_child per spec
	(gom_doc_get_element_by_id): loop through all children
	(gom_dom_parser_start_script): support src attribute of script tag
	(only local files so far)
	(gom_dom_parser_start_element): split script tag to above
	(gom_dom_parser_end_element): script tags with src attributes will
	not have their contents parsed

	* src/libgom/gomjsexception.[ch]: actually commit these files this
	time

	* src/libgom/gomjsnavigator.[ch]: add a window.navigator
	implementation

2008-03-07  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsexception.c (gom_js_exception_get_error)
	(gom_js_exception_set_error): convert between GError and js
	exceptions

	* src/libgom/gomjselement.c: throw exceptions on error

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): throw
	exceptions for errors
	(gom_dom_parser_end_element): throw an exception if <script>
	evaluation fails

	* src/libgom/gomjscontext.c (gom_js_context_init_private): throw
	an exception if the context already has private data

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	throw exceptions when we return failure

	* src/libgom/gomdoc.c: add an error quark for document parsing
	errors

2008-03-06  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjswindow.c (gom_js_window_set_interval): implement
	(the variant with a string as the first method seems to be broken,
	though)
	(gom_js_window_clear_interval): implement
	(gom_js_window_set_timeout, gom_js_window_clear_timeout): implement

	* src/gom/gom.c (main): that... wasn't quite the right way to free
	our context private data

2008-03-05  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjselement.c (gom_js_element_init_class): register
	as a handler for GtkWidgets

	* src/libgom/gomjswindow.c (gom_js_window_init_object): initialize
	a global Window object

	* src/libgom/gomdoc.c: 
	* src/libgom/gomwidget.c (gom_widget_init_once): remove
	GomJSObject implementation

	* src/libgom/gomjsobject.c (gom_js_object_register_js_class):
	instead of being an interface that objects support, JSClasses
	should register their GType in their init function
	(gom_js_object_get_js_class): look up an object's JSClass; if none
	are found in its parents or interfaces, just return a GomJSObject
	(gom_js_object_resolve): fully remove bogus GomJSObject check
	(gom_js_object_init_class): store GObject <-> JSObject hashes
	per-context rather than globally; also, create a GType -> JSClass
	table
	(gom_js_object_get_or_create_js_object): use new class lookup
	method

	* src/libgom/gominterfaces.c: remove GomJSObject definition

	* src/libgom/gomdom.c (gom_dom_exception_error_quark): use quark
	macro

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	remove check for GOM_IS_JS_OBJECT()
	(gom_js_document_init_class): register as a class for GomDocument

	* src/gom/gom.c (main): use new gom_js_context_* funcs

	* src/libgom/gomjscontext.c (gom_js_context_init): merge
	gom.c:main() and gomjswindow.c:gom_js_window_new_global(), and
	initialize a private GObject as the JSContext's private data

2008-03-04  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjsobject.c (gom_js_object_to_string): print the
	gtype for gom objects in toString

	* src/libgom/gomjselement.c (gom_js_element_get_prop): return if
	there was no attribute
	(gom_js_element_resolve): if the prototype object has a property
	already, don't create one here

	* src/libgom/gomdoc.c (element_get_element_by_id): poor but
	functional implementation
	(gom_doc_get_element_by_id): call above method

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): don't set the
	return value if it's G_TYPE_INVALID (not sure if this is right
	yet...)
	(gom_js_object_resolve): remove warning if the object is not a
	GomJSObject
	(gom_js_object_get_or_create_js_object): if the object doesn't
	support GomJSObject, just create a js GomJSObject for it anyway

	* src/libgom/gominterfaces.c: add get_element_by_id stub

	* src/libgom/gomvalue.c (gom_jsval): allow GObjects now that
	_get_or_create_js_object() handles non-GomJSObjects; also set the
	return jsval to the object and return success on success

	* src/libgom/gomjsdocument.c (gom_js_document_get_element_by_id):
	use new DOM Level 2 Core method

2008-03-03  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomdom.c (gom_dom_exception_error_quark): use a GOnce
	here

	* src/libgom/gomdoc.c (gom_doc_create_element): if the object
	could not be instantiated, set an error (fixes a secondary cause
	of the crash in issue #1)

	* include/gom/dom/gomdomexception.h: add an exception for unknown
	tags

	* src/libgom/gomwidget.c (gom_widget_init_once): return our fake
	type variable so that it all doesn't get optimized out (fixes
	issue #1)

	* src/libgom/gomjselement.c (element_get_prop, element_set_prop):
	use gom_object_[gs]et_attribute() for non-GObject properties
	(element_resolve): define non-GObject properties

	* src/libgom/gomwidget.c (append_child_attrs_foreach): helper for
	setting child attributes/properties
	(widget_append_child): use helper now that we don't have direct
	access to attributes
	(widget_get_attribute, widget_set_attribute): use
	gom_object_[gs]et_attribute()

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): convert
	arguments using gom_jsval(), try to return something if
	appropriate (untested)
	(gom_js_object_resolve): move reusable bits to
	gom_object_resolve()
	(gom_js_object_init_once, gom_js_object_init_class): init
	hashtables once

	* include/gom/gomvalue.[ch] (gom_jsval): declare the src GValue as
	const

	* include/gom/gomobject.[ch]: add some object utility functions
	shared by some js classes

2008-02-25  jacob berkman  <jacob@ilovegom.org>

	* tests/checkgomvalue.c: add checks for gom_jsval()

	* src/libgom/gomvalue.c (gom_jsval): make G_TYPE_CHAR and
	G_TYPE_UCHAR set strings

2008-02-24  jacob berkman  <jacob@ilovegom.org>

	* tests/checkgomvalue.[ch]: test gomvalue.h functions (so far only
	some of gom_g_value() is covered, but it has turned up some bugs;
	more expected in gom_jsval())

	* tests/checkgom.[ch]: beginnings of a test suite

	* src/libgom/gomvalue.c (gom_g_value): unit test bug fix #1: since
	JSVAL_INTs are 31 bits, their lsb (the tag mask) can have multiple
	values, since only the most lsb signifies JSVAL_INT

	* autogen.sh: remove dependency on gnome-common; just use
	autoreconf -im

	* include/gom/dom/Makefile.inc: 
	* include/gom/Makefile.inc: 
	* src/libgom/Makefile.inc: 
	* src/gom/Makefile.inc: 
	* Makefile.am:
	* Makefile.inc: split Makefile.inc into its component pieces

	* configure.ac: look for check

	* examples/console.gom: use some of the new stuff below

	* src/libgom/gomjsobject.c (object_get_closure_prop)
	(object_set_closure_prop): add a lookup for closures stored as
	properties named onsignal
	(gom_js_object_resolve): look up the GParamSpec or signal id on an
	object for a named property
	(object_get_prop): if the property is a gobject property, return
	its value.  if it's a signal, look up the func associated with its
	closure, if it exists
	(object_set_prop): setter as above
	(object_resolve): if the property exists, add it as a property to
	this object
	(gom_js_object_construct, gom_js_object_init_class): as below

	* src/libgom/gomjselement.c (element_construct)
	(gom_js_element_init_class): as below

	* src/libgom/gomjsnode.c (node_construct, gom_js_node_init_class):
	same as below

	* src/libgom/gomjsdocument.c (document_construct): add dummy
	constructor
	(gom_js_document_init_class): the proto should be constructed,
	pass our constructor to JS_InitClass

	* src/gom/gom.c (parse_idle): run in window's context, not jsdoc's

	* src/libgom/gomvalue.[ch] (gom_jsval): convert a GValue to a
	jsval
	(gom_g_value): convert a jsval to a GValue

2008-02-22  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomjselement.c (element_get_attribute): use
	JS_ConvertArguments() as below
	(element_set_attribute): finish a correct implementation for
	setting event handlers via setAttribute(); this will probably be
	removed soon

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): refactor to
	reduce indenting levels

	* src/libgom/gomjswindow.c (window_alert): use
	JS_ConvertArguments() instead of manually marshaling the js
	arguments

2008-02-21  jacob berkman  <jacob@ilovegom.org>

	* examples/console.gom: quit when the window is closed

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): better
	handling for callbacks that return void

	* examples/console.gom: beginnings of a gui js console app

	* src/libgom/gomjselement.c (element_set_attribute): handle jsvals
	that aren't strings properly

	* src/libgom/gomdoc.c (gom_dom_parser_text): remove some debugging
	output
	(gom_dom_parser_error): remove, this was not useful
	
	* src/libgom/gomjswindow.c (window_alert): implement window.alert()

	* src/libgom/gomwidget.c (PRIV, free_priv, init_priv): add a
	private struct to store attrs instead of using _set_data/_get_data
	as we have no idea what the types of those data are
	(widget_append_child): use new priv struct to look for container
	child properties of the widget being added
	(widget_find_property): remove.  g_object_class_find_property()
	can do this all on its own
	(widget_get_attribute): initial implementation; use priv table if
	available
	(widget_set_attribute): store property in priv table if there
	isn't a property on the object
	(init_once_cb, gom_widget_init): switch to GOnce/g_once() as below

	* src/libgom/gomjsobject.c (gom_js_closure_marshal): use
	G_VALUE_TYPE_NAME() instead of g_type_name(G_VALUE_TYPE())

	* src/libgom/*.c: add GOM_NOT_IMPLEMENTED macros where appropriate

	* include/gommacros.h (GOM_NOT_IMPLEMENTED): macro to print a
	warning on functions that are not yet implemented
	(_GOM_DEFINE_INTERFACE_BEGIN, _GOM_DEFINE_INTERFACE_END): use
	GOnce/g_once() instead of g_once_init_enter(), as the latter has
	different signatures on my mac and linux machines

2008-02-17  jacob berkman  <jacob@ilovegom.org>

	* src/libgom/gomdoc.c (gom_dom_parser_start_element): compile the
	function here before trying to connect the signal
	(gom_doc_parse_file): take a filename instead of a string

	* src/libgom/gomjsobject.c (gom_js_object_finalize): use
	gom_js_object_get_g_object() to get the GObject for this JSObject
	(gom_js_closure_new, gom_js_object_connect): take a JSFunction
	instead of a script

	* src/gom/gom.c (parse_idle): move doc parsing here so scripts can
	quit(), and let gom_doc_parse_file() load the file
	(main): shutdown javascript runtime to catch refcount bugs

2008-02-17  jacob berkman  <jacob@ilovegom.org>

	* Gom 0.0 released
